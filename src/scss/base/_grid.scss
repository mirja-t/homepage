@use 'sass:math';
@import '../mixins/breakpoints';

$grid-gap: $mainpadding;
$grid-gap-xs: $padding-xs;
$grid-gap-m: $padding-xl;

$gutter: (
    xs: $padding-xs,
    m:  $padding-xl
);
/*
.grid {
    display: flex;
    flex-wrap: wrap;
    column-gap: $mainpadding;
    row-gap: $mainpadding;

    > * {
        flex-basis: calc( 20em + $scalefactor * 2 );
        flex-grow: 1;
    }
}
*/
.container {
    padding: 0 $mainpadding;
}

// positioning
// align vertically centered
$colums: 12;

[class*="grid"] {
    display: flex;
    flex-wrap: wrap;
    gap: $grid-gap;

    @each $name, $gap in $gutter {
        &.gutter-#{$name} { 
            //padding: calc( $gap * 0.5 );
            gap: $gap;
        }
    }
    .row {
        width: 100%;
        display: flex;
        flex-direction: row;
        flex-shrink: 0;
    }
    > li {
        flex-basis: calc( 20em + $scalefactor * 2 );
        flex-grow: 1;
    }
}
.grid {
    flex-direction: row;
    @for $i from 1 through $colums {
        .col-#{$i} {
            width: calc( (math.div(100%, $colums) * $i) - $grid-gap / 2);
        } 
    }
}

@each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    .row#{$infix} {
        width: 100%;
        display: flex;
        flex-direction: column;
        flex-shrink: 0;
    }
    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
        .row#{$infix} {
            flex-direction: row;
        }
    }
}

@each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    
    .grid#{$infix} {
        flex-direction: column;
        align-items: center;
        @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
            flex-direction: row;
            align-items: flex-start;
            @for $i from 1 through $colums {
                .col-#{$i} {
                    width: calc( (math.div(100%, $colums) * $i) - $grid-gap / 2);
                } 
                @each $name, $gap in $gutter {
                    &.gutter-#{$name} { 
                        .col-#{$i} {
                            width: calc( (math.div(100%, $colums) * $i) - $gap / 2);
                        } 
                    }
                }
            }
        }
    }
}